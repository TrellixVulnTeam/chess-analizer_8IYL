{"version":3,"sources":["../src/DeprecatedExpoGLObjectTextureLoader.js"],"names":["neverEnding","Promise","available","NativeModulesProxy","ExponentGLObjectManager","createObjectAsync","warned","ExpoGLObjectTextureLoader","WebGLTextureLoaderAsyncHashCache","WeakMap","canLoad","input","console","log","disposeTexture","texture","exglObjId","objIds","get","destroyObjectAsync","delete","inputHash","config","JSON","stringify","loadNoCache","gl","__exglCtxId","exglCtxId","disposed","dispose","promise","then","WebGLTexture","set","width","height","globalRegistry","add"],"mappings":";;;;;;;AACA;;AAIA;;;;AAEA,MAAMA,WAAW,GAAG,IAAIC,OAAJ,CAAY,MAAM,CAAE,CAApB,CAApB;AAEA,MAAMC,SAAS,GAAG,CAAC,EACjBC,yBAAmBC,uBAAnB,IACAD,yBAAmBC,uBAAnB,CAA2CC,iBAF1B,CAAnB;AAKA,IAAIC,MAAM,GAAG,KAAb;;AAEA,MAAMC,yBAAN,SAAwCC,oDAAxC,CAAiF;AAAA;AAAA;;AAAA,oCAGvC,IAAIC,OAAJ,EAHuC;AAAA;;AAK/EC,EAAAA,OAAO,CAACC,KAAD,EAAa;AAClB,QAAI,CAACT,SAAD,IAAc,CAACI,MAAnB,EAA2B;AACzBA,MAAAA,MAAM,GAAG,IAAT;AACAM,MAAAA,OAAO,CAACC,GAAR,CACE,oIADF;AAGD;;AACD,WAAOX,SAAS,IAAI,OAAOS,KAAP,KAAiB,QAArC;AACD;;AAEDG,EAAAA,cAAc,CAACC,OAAD,EAAwB;AACpC,UAAMC,SAAS,GAAG,KAAKC,MAAL,CAAYC,GAAZ,CAAgBH,OAAhB,CAAlB;;AACA,QAAIC,SAAJ,EAAe;AACbb,+BAAmBC,uBAAnB,CAA2Ce,kBAA3C,CAA8DH,SAA9D;AACD;;AACD,SAAKC,MAAL,CAAYG,MAAZ,CAAmBL,OAAnB;AACD;;AAEDM,EAAAA,SAAS,CAACC,MAAD,EAAiB;AACxB;AACA,WAAOC,IAAI,CAACC,SAAL,CAAeF,MAAf,CAAP;AACD;;AAEDG,EAAAA,WAAW,CAACH,MAAD,EAAiB;AAC1B,UAAM;AAAEI,MAAAA;AAAF,QAAS,IAAf,CAD0B,CAE1B;;AACA,UAAM;AAAEC,MAAAA,WAAW,EAAEC;AAAf,QAA6BF,EAAnC;AACA,QAAIG,QAAQ,GAAG,KAAf;;AACA,UAAMC,OAAO,GAAG,MAAM;AACpBD,MAAAA,QAAQ,GAAG,IAAX;AACD,KAFD;;AAGA,UAAME,OAAO,GAAG5B,yBAAmBC,uBAAnB,CAA2CC,iBAA3C,CACd;AACEuB,MAAAA,SADF;AAEEb,MAAAA,OAAO,EAAEO;AAFX,KADc,EAKdU,IALc,CAKT,CAAC;AAAEhB,MAAAA;AAAF,KAAD,KAAmB;AACxB,UAAIa,QAAJ,EAAc,OAAO7B,WAAP,CADU,CAExB;;AACA,YAAMe,OAAO,GAAG,IAAIkB,YAAJ,CAAiBjB,SAAjB,CAAhB;AACA,WAAKC,MAAL,CAAYiB,GAAZ,CAAgBnB,OAAhB,EAAyBC,SAAzB;AACA,YAAMmB,KAAK,GAAG,CAAd;AACA,YAAMC,MAAM,GAAG,CAAf,CANwB,CAOxB;;AACA,aAAO;AAAErB,QAAAA,OAAF;AAAWoB,QAAAA,KAAX;AAAkBC,QAAAA;AAAlB,OAAP;AACD,KAde,CAAhB;;AAeA,WAAO;AAAEL,MAAAA,OAAF;AAAWD,MAAAA;AAAX,KAAP;AACD;;AApD8E;;gBAA3EvB,yB,cACc,CAAC,G;;AAsDrB8B,mCAAeC,GAAf,CAAmB/B,yBAAnB;;eAEeA,yB","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\nimport { NativeModulesProxy } from \"@unimodules/core\";\n\nconst neverEnding = new Promise(() => {});\n\nconst available = !!(\n  NativeModulesProxy.ExponentGLObjectManager &&\n  NativeModulesProxy.ExponentGLObjectManager.createObjectAsync\n);\n\nlet warned = false;\n\nclass ExpoGLObjectTextureLoader extends WebGLTextureLoaderAsyncHashCache<Object> {\n  static priority = -200;\n\n  objIds: WeakMap<WebGLTexture, number> = new WeakMap();\n\n  canLoad(input: any) {\n    if (!available && !warned) {\n      warned = true;\n      console.log(\n        \"webgltexture-loader-expo: ExponentGLObjectManager.createObjectAsync is not available. Make sure to use the correct version of Expo\"\n      );\n    }\n    return available && typeof input === \"object\";\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    const exglObjId = this.objIds.get(texture);\n    if (exglObjId) {\n      NativeModulesProxy.ExponentGLObjectManager.destroyObjectAsync(exglObjId);\n    }\n    this.objIds.delete(texture);\n  }\n\n  inputHash(config: Object) {\n    // JSON.stringify is a quick way to hash the config object\n    return JSON.stringify(config);\n  }\n\n  loadNoCache(config: Object) {\n    const { gl } = this;\n    // $FlowFixMe\n    const { __exglCtxId: exglCtxId } = gl;\n    let disposed = false;\n    const dispose = () => {\n      disposed = true;\n    };\n    const promise = NativeModulesProxy.ExponentGLObjectManager.createObjectAsync(\n      {\n        exglCtxId,\n        texture: config\n      }\n    ).then(({ exglObjId }) => {\n      if (disposed) return neverEnding;\n      // $FlowFixMe\n      const texture = new WebGLTexture(exglObjId);\n      this.objIds.set(texture, exglObjId);\n      const width = 0;\n      const height = 0;\n      // ^ unfortunately there is no way to retrieve these\n      return { texture, width, height };\n    });\n    return { promise, dispose };\n  }\n}\n\nglobalRegistry.add(ExpoGLObjectTextureLoader);\n\nexport default ExpoGLObjectTextureLoader;\n"],"file":"DeprecatedExpoGLObjectTextureLoader.js"}