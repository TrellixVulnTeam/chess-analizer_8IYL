{"version":3,"sources":["../src/GLViewNative.js"],"names":["GLViewNative","Component","ref","gl","getExtension","name","call","props","onContextCreate","opt","Promise","reject","Error","takeSnapshotAsync","afterDraw","flush","endFrameEXP","render","style","children","rest","__DEV__","console","warn","position","overflow","flex","top","left","onRef","opacity"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEe,MAAMA,YAAN,SAA2BC,gBAA3B,CAIZ;AAAA;AAAA;;AAAA;;AAAA,mCAQQC,GAAD,IAAoB;AAC1B,WAAKA,GAAL,GAAWA,GAAX;AACD,KAVA;;AAAA,6CAYkBC,EAAD,IAA+B;AAC/C,YAAM;AAAEC,QAAAA;AAAF,UAAmBD,EAAzB,CAD+C,CAE/C;AACA;;AACAA,MAAAA,EAAE,CAACC,YAAH,GAAmBC,IAAD,IAAU;AAC1B,YAAIA,IAAI,KAAK,WAAb,EAA0B,OAAO,KAAKH,GAAZ;AAC1B,eAAOE,YAAY,CAACE,IAAb,CAAkBH,EAAlB,EAAsBE,IAAtB,CAAP;AACD,OAHD;;AAIA,WAAKE,KAAL,CAAWC,eAAX,CAA2BL,EAA3B;AACD,KArBA;;AAAA,qCAwBCM,GADQ,IAOJ;AACJ,YAAM;AAAEP,QAAAA;AAAF,UAAU,IAAhB;AACA,UAAI,CAACA,GAAL,EAAU,OAAOQ,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,qBAAV,CAAf,CAAP;AACV,aAAOV,GAAG,CAACW,iBAAJ,CAAsBJ,GAAtB,CAAP;AACD,KAlCA;AAAA;;AACDK,EAAAA,SAAS,CAACX,EAAD,EAA4B;AACnCA,IAAAA,EAAE,CAACY,KAAH,GADmC,CAEnC;;AACAZ,IAAAA,EAAE,CAACa,WAAH;AACD;;AA+BDC,EAAAA,MAAM,GAAG;AACP,wBAAsD,KAAKV,KAA3D;AAAA,UAAM;AAAEW,MAAAA,KAAF;AAASV,MAAAA,eAAT;AAA0BW,MAAAA;AAA1B,KAAN;AAAA,UAA6CC,IAA7C;;AACA,QAAIC,OAAJ,EAAa;AACX,UAAI,WAAWD,IAAX,IAAmB,YAAYA,IAAnC,EAAyC;AACvCE,QAAAA,OAAO,CAACC,IAAR,CACE,4GADF;AAGD;AACF;;AACD,wBACE,6BAAC,iBAAD,eACMH,IADN;AAEE,MAAA,KAAK,EAAE,CAAC;AAAEI,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,QAAQ,EAAE;AAAlC,OAAD,EAA+CP,KAA/C;AAFT,qBAIE,6BAAC,cAAD;AACE,MAAA,KAAK,EAAE,CACLA,KADK,EAEL;AACEQ,QAAAA,IAAI,EAAE,CADR;AAEEF,QAAAA,QAAQ,EAAE,UAFZ;AAGEG,QAAAA,GAAG,EAAE,CAHP;AAIEC,QAAAA,IAAI,EAAE;AAJR,OAFK,CADT;AAUE,MAAA,eAAe,EAAE,KAAKpB,eAVxB;AAWE,MAAA,GAAG,EAAE,KAAKqB;AAXZ,MAJF,eAiBE,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAb,OAA8BX,QAA9B,CAjBF,CADF;AAqBD;;AAlEA","sourcesContent":["//@flow\nimport React, { Component } from \"react\";\nimport { View } from \"react-native\";\nimport { GLView as EXGLView } from \"expo-gl\";\n\nexport default class GLViewNative extends Component<{\n  onContextCreate: (gl: WebGLRenderingContext) => void,\n  style?: any,\n  children?: any,\n}> {\n  afterDraw(gl: WebGLRenderingContext) {\n    gl.flush();\n    // $FlowFixMe\n    gl.endFrameEXP();\n  }\n\n  ref: ?EXGLView;\n  onRef = (ref: ?EXGLView) => {\n    this.ref = ref;\n  };\n\n  onContextCreate = (gl: WebGLRenderingContext) => {\n    const { getExtension } = gl;\n    // monkey patch to get a way to access the EXGLView\n    // $FlowFixMe\n    gl.getExtension = (name) => {\n      if (name === \"GLViewRef\") return this.ref;\n      return getExtension.call(gl, name);\n    };\n    this.props.onContextCreate(gl);\n  };\n\n  capture = (\n    opt: *\n  ): Promise<{\n    uri: string,\n    localUri: string,\n    width: number,\n    height: number,\n  }> => {\n    const { ref } = this;\n    if (!ref) return Promise.reject(new Error(\"glView is unmounted\"));\n    return ref.takeSnapshotAsync(opt);\n  };\n\n  render() {\n    const { style, onContextCreate, children, ...rest } = this.props;\n    if (__DEV__) {\n      if (\"width\" in rest || \"height\" in rest) {\n        console.warn(\n          \"gl-react-expo <Surface>: no such width/height prop. instead you must use the style prop like for a <View>.\"\n        );\n      }\n    }\n    return (\n      <View\n        {...rest}\n        style={[{ position: \"relative\", overflow: \"hidden\" }, style]}\n      >\n        <EXGLView\n          style={[\n            style,\n            {\n              flex: 1,\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n            },\n          ]}\n          onContextCreate={this.onContextCreate}\n          ref={this.onRef}\n        />\n        <View style={{ opacity: 0 }}>{children}</View>\n      </View>\n    );\n  }\n}\n"],"file":"GLViewNative.js"}